# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="n?@KgU0l>p5Jb_?90yWXZN?[MAR@AMbTVpb/_pWb1J7nEUq7dxiWTZIPdVEXTdKx"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=lifecycle.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`

db.default.driver=com.mysql.jdbc.Driver
db.default.url="jdbc:mysql://localhost:3306/videostore"
db.default.user=video
db.default.password=video

# You can expose this datasource via JNDI if needed (Useful for JPA)
db.default.jndiName=VideoStore

# JPA configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
jpa.default=videoPersistenceUnit

# BONE CP configuration
# ~~~~~
# In order to reduce lock contention and thus improve performance, 
# each incoming connection request picks off a connection from a 
# pool that has thread-affinity. 
# The higher this number, the better your performance will be for the 
# case when you have plenty of short-lived threads. 
# Beyond a certain threshold, maintenance of these pools will start 
# to have a negative effect on performance (and only for the case 
# when connections on a partition start running out).
db.default.partitionCount=4

# The number of connections to create per partition. Setting this to 
# 5 with 3 partitions means you will have 15 unique connections to the 
# database. Note that BoneCP will not create all these connections in 
# one go but rather start off with minConnectionsPerPartition and 
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=40

# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=20

# When the available connections are about to run out, BoneCP will 
# dynamically create new ones in batches. This property controls 
# how many new connections to create in one go (up to a maximum of 
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=1

# After attempting to acquire a connection and failing, try to 
# connect this number of times before giving up.
db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a 
# connection again after a failure.
db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call 
# to getConnection is timed out.
db.default.connectionTimeout=1 second

# Idle max age
db.default.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a test query to the DB. 
# This is useful to prevent a DB from timing out connections on its end. 
db.default.idleConnectionTestPeriod=5 minutes

# An initial SQL statement that is run only when 
# a connection is first created.
db.default.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
db.default.logStatements=false

# The maximum connection age.
db.default.maxConnectionAge=1 hour

#
# Akka configuration
# ~~~~~~~~~~~~~~~~~~~~
play {
  akka {
    akka.loggers = ["akka.event.Logging$DefaultLogger", "akka.event.slf4j.Slf4jLogger"]
    loglevel = WARNING
    actor {
      deployment {
       /actions {
        router = round-robin
        nr-of-instances = 50
       }
       /promises {
        router = round-robin
        nr-of-instances = 50
       }
      }
      default-dispatcher = {
        fork-join-executor {
		  # Min number of threads to cap factor-based parallelism number to
		  parallelism-min = 100
          # Parallelism (threads) ... ceil(available processors * factor)
          parallelism-factor = 100
          # Max number of threads to cap factor-based parallelism number to
          parallelism-max = 400
        }
      }
    }
  }
}

#
# Play's pool size configuration
# ~~~~~~~~~~~~~~~~~~~~
internal-threadpool-size=20

#
# Assets configuration
# ~~~~~~~~~~~~~~~~~~~~
"assets.cache./public/stylesheets/bootstrap.min.css"="max-age=3600"
"assets.cache./public/javascripts/jquery-1.9.0.min.js"="max-age=3600"
"assets.cache./public/javascripts/jquery.widget.min.js"="max-age=3600"
"assets.cache./public/javascripts/bootstrap.min.js"="max-age=3600"
"assets.cache./public/javascripts/angular.min.js"="max-age=3600"
"assets.cache./public/javascripts/angular-resources.min.js"="max-age=3600"
"assets.cache./public/javascripts/angular-routes.min.js"="max-age=3600"
"assets.cache./public/javascripts/app.min.js"="max-age=3600"